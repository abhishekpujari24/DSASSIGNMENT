Here are several methods to check if a given string is a palindrome in Java, along with their time and space complexities.

1. Reverse and Compare
Approach:

1. Reverse the given string.
2. Compare the original string with the reversed string.

Code :
public class PalindromeChecker {

    public static boolean isPalindromeReverse(String s) {
        String reversed = new StringBuilder(s).reverse().toString();
        return s.equals(reversed);
    }

    public static void main(String[] args) {
        System.out.println(isPalindromeReverse("racecar")); // true
        System.out.println(isPalindromeReverse("hello")); // false
    }
}

Time Complexity:

Reversing the string:O(n)
Comparing two strings: O(n)
Overall: O(n)
Space Complexity:

Space required for the reversed string:O(n)
Overall: O(n)


2. Two-Pointer Technique
Approach:

1. Use two pointers, one starting from the beginning (left) and one from the end (right) of the string.
2. Move towards the center, comparing characters at each step.
Code:
public class PalindromeChecker {

    public static boolean isPalindromeTwoPointer(String s) {
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(isPalindromeTwoPointer("racecar")); // true
        System.out.println(isPalindromeTwoPointer("hello")); // false
    }
}


Time Complexity:

Each character is checked once: O(n)
Space Complexity:

Only a few extra variables are used: O(1)


3. Recursive Approach
Approach:
Compare the first and last characters.
Recursively check the substring that excludes these characters.
Code:
public class PalindromeChecker {

    public static boolean isPalindromeRecursive(String s) {
        return isPalindromeRecursiveHelper(s, 0, s.length() - 1);
    }

    private static boolean isPalindromeRecursiveHelper(String s, int left, int right) {
        if (left >= right) {
            return true;
        }
        if (s.charAt(left) != s.charAt(right)) {
            return false;
        }
        return isPalindromeRecursiveHelper(s, left + 1, right - 1);
    }

    public static void main(String[] args) {
        System.out.println(isPalindromeRecursive("racecar")); // true
        System.out.println(isPalindromeRecursive("hello")); // false
    }
}

Time Complexity:

Each recursive call processes a smaller substring: O(n)
Space Complexity:

Due to the recursion stack, in the worst case: O(n)


4. Iterative Comparison with Stack
Approach:

1. Push the first half of the string onto a stack.
2. Pop from the stack and compare with the second half of the string.

CODE:
import java.util.Stack;

public class PalindromeChecker {

    public static boolean isPalindromeStack(String s) {
        Stack<Character> stack = new Stack<>();
        int length = s.length();
        int mid = length / 2;

        for (int i = 0; i < mid; i++) {
            stack.push(s.charAt(i));
        }

        if (length % 2 != 0) {
            mid++;
        }

        for (int i = mid; i < length; i++) {
            if (stack.pop() != s.charAt(i)) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(isPalindromeStack("racecar")); // true
        System.out.println(isPalindromeStack("hello")); // false
    }
}

Time Complexity:

Pushing to and popping from the stack: O(n)
Space Complexity:

Stack space: O(n/2)=O(n)
Overall:O(n)
5. Iterative Comparison with Queue
Approach:

Push characters to a queue.
Pop from the queue and compare with the remaining characters.
Code:
import java.util.LinkedList;
import java.util.Queue;

public class PalindromeChecker {

    public static boolean isPalindromeQueue(String s) {
        Queue<Character> queue = new LinkedList<>();
        for (char c : s.toCharArray()) {
            queue.offer(c);
        }

        while (queue.size() > 1) {
            if (queue.poll() != ((LinkedList<Character>) queue).pollLast()) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(isPalindromeQueue("racecar")); // true
        System.out.println(isPalindromeQueue("hello")); // false
    }
}

Time Complexity:

Adding to and removing from the queue: O(n)
Space Complexity:

Queue space: O(n)
Overall: O(n)